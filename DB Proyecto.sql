--****INICIO PARTE 1****

--CREAR NUEVO USUARIO:
--1. Comandos en CMD:
--2. sqlplus / as sysdba
--3. ALTER SESSION SET"_ORACLE_SCRIPT" = TRUE;
--4. CREATE USER DBAPROY IDENTIFIED BY dba24680;
--5. GRANT DBA TO DBAPROY;

--CREAR DATABASE Proyecto_BD:
--1. En "Connections", crear nueva BD
--2. Nombrar nueva BD como "Proyecto_BD"
--3. Username = DBAPROY
--4. Password = dba24680
--5. SID = orcl
--6. Boton Test = Success
--7. Connect
        
--DROP TABLE CLIENTES CASCADE CONSTRAINTS; --Eliminar tablas con constraints

CREATE TABLE USUARIOS(
    ced NUMBER PRIMARY KEY,
    nombre VARCHAR2(25) NOT NULL,
    apellidos VARCHAR2(50) NOT NULL,
    fecha_nacimiento DATE NOT NULL,
    contrasenha VARCHAR2(100) NOT NULL);

CREATE TABLE MATERIALES(
    sku_producto VARCHAR2(30) PRIMARY KEY,
    descripcion VARCHAR2(50) NOT NULL,
    es_combo VARCHAR2(1) DEFAULT 'N',
    precio_unidad NUMBER NOT NULL,
    fecha_registro_producto DATE DEFAULT SYSDATE,
    descontinuado VARCHAR2(1) DEFAULT 'N'); --Valores: Y/N

--INSERT INTO MATERIALES(sku_producto,descripcion,precio_unidad,descontinuado) VALUES('ABC123','Comida',148.32,'Y');

--SELECT * FROM MATERIALES;
    
CREATE TABLE PROVEEDORES(
    ced_proveedor NUMBER PRIMARY KEY,
    tipo_ced VARCHAR2(25),
    nombre_proveedor VARCHAR2(50) NOT NULL,
    fecha_ingreso DATE DEFAULT SYSDATE,
    telefono VARCHAR2(15) NOT NULL,
    email VARCHAR2(100) NOT NULL,
    direccion VARCHAR2(100) NOT NULL,
    distrito VARCHAR2(20) NOT NULL,
    canton VARCHAR2(20) NOT NULL,
    provincia VARCHAR2(20) NOT NULL,
    fecha_registro DATE DEFAULT SYSDATE);

CREATE TABLE CLIENTES(
    ced_cliente NUMBER PRIMARY KEY,
    nombre_cliente VARCHAR2(50) NOT NULL,
    fecha_nacimiento DATE,
    telefono VARCHAR2(15) NOT NULL,
    email VARCHAR2(100) NOT NULL,
    direccion VARCHAR2(100),
    distrito VARCHAR2(20),
    canton VARCHAR2(20),
    provincia VARCHAR2(20),
    fecha_registro DATE DEFAULT SYSDATE);
    
CREATE TABLE INVENTARIO(
    sku_producto VARCHAR2(30) PRIMARY KEY,
    unidades_disponibles NUMBER NOT NULL,
    fecha_ultima_modificacion DATE DEFAULT SYSDATE,
    
    CONSTRAINT sku_inventario_fk FOREIGN KEY(sku_producto)
        REFERENCES MATERIALES(sku_producto) ON DELETE CASCADE
);
    
CREATE TABLE COTIZACIONES(
    id_cotizacion NUMBER NOT NULL,
    ced_proveedor NUMBER NOT NULL,
    sku_producto VARCHAR2(30) NOT NULL,
    fecha_cotizacion DATE DEFAULT SYSDATE,
    fecha_vencimiento DATE NOT NULL,
    dias_para_vencimiento NUMBER AS(fecha_vencimiento - fecha_cotizacion),
    estado_cotizacion VARCHAR2(15) DEFAULT 'Pendiente',
    fecha_recibido DATE,
    estado_producto VARCHAR2(20) DEFAULT 'No recibido',
    
    CONSTRAINT cotiza_pk PRIMARY KEY(id_cotizacion,ced_proveedor,sku_producto),
    
    CONSTRAINT proveedor_cotiza_fk FOREIGN KEY(ced_proveedor)
        REFERENCES PROVEEDORES(ced_proveedor) ON DELETE CASCADE,
    
    CONSTRAINT sku_cotiza_fk FOREIGN KEY(sku_producto)
        REFERENCES MATERIALES(sku_producto) ON DELETE CASCADE
);

CREATE TABLE FACTURACION(
    num_factura NUMBER NOT NULL,
    ced_cliente NUMBER NOT NULL,
    sku_producto VARCHAR2(30) NOT NULL,
    fecha_venta DATE DEFAULT SYSDATE,
    precio_venta NUMBER NOT NULL,
    unidades NUMBER NOT NULL,
    
    CONSTRAINT factura_pk PRIMARY KEY(num_factura,ced_cliente,sku_producto),
    
    CONSTRAINT factura_cliente_fk FOREIGN KEY(ced_cliente)
        REFERENCES CLIENTES(ced_cliente),
    
    CONSTRAINT sku_factura_fk FOREIGN KEY(sku_producto)
        REFERENCES MATERIALES(sku_producto)
);

--ALTER TABLE FACTURACION DROP CONSTRAINT factura_pk;

--ALTER TABLE FACTURACION ADD CONSTRAINT factura_pk PRIMARY KEY (sku_producto);

COMMIT;

--****FIN PARTE 1****

--****INICIO PARTE 2****

CREATE TABLE IVA(
    consecutivo NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    num_factura NUMBER NOT NULL,
    sku_producto VARCHAR2(30) NOT NULL,
    iva_total NUMBER NOT NULL,
    fecha_insercion DATE DEFAULT SYSDATE,
    
    CONSTRAINT iva_pk PRIMARY KEY(consecutivo)
);
COMMIT;

--PROCEDIMIENTOS - Luis

--SP1 - Agrega nuevos valores a tabla IVA
CREATE OR REPLACE PROCEDURE ivaTotal(numFactura IN NUMBER, precio IN NUMBER, sku IN VARCHAR2)
AS
    iva NUMBER := precio*0.13;
    BEGIN
    INSERT INTO IVA(num_factura,sku_producto,iva_total) VALUES(numFactura,sku,iva);
COMMIT;
END;

EXEC ivaTotal(22,3600,'MFG785');

SELECT * FROM IVA;

--SP2 - Agregar un producto nuevo sin combo
CREATE OR REPLACE PROCEDURE nuevoProductoSin(producto IN VARCHAR2, descripcion IN VARCHAR2, precioUnidad IN NUMBER)
AS
BEGIN
    INSERT INTO MATERIALES(sku_producto,descripcion,precio_unidad) VALUES(producto,descripcion,precioUnidad);
COMMIT;
END;

Exec nuevoProductoSin('DFT34X','Tinta negra','6780');

SELECT * FROM MATERIALES;

--SP3 - Agregar un producto nuevo con combo
CREATE OR REPLACE PROCEDURE nuevoProductoCon(producto IN VARCHAR2, descripcion IN VARCHAR2, precioUnidad IN NUMBER)
AS
BEGIN
    INSERT INTO MATERIALES(sku_producto,descripcion,es_combo,precio_unidad) VALUES(producto,descripcion,'Y',precioUnidad);
COMMIT;
END;

Exec nuevoProductoCon('DFT35X','Tinta blanca','6480');

SELECT * FROM MATERIALES;

--SP4 - Actualización de contraseña
CREATE OR REPLACE PROCEDURE actualizarContra(cedula IN NUMBER, contra IN VARCHAR2)
AS
BEGIN
  UPDATE USUARIOS
  SET contrasenha = contra
  WHERE ced = cedula;
  COMMIT;
END;

SELECT * FROM USUARIOS;

INSERT INTO USUARIOS(ced,nombre,apellidos,fecha_nacimiento,contrasenha) VALUES(123,'Luis','Castro','12-may-1994','A123');

EXEC actualizarContra(123,'B456');

--PROCEDIMIENTOS - Maria

--SP5 - Actualizar estado de cotizacion 

CREATE OR REPLACE PROCEDURE ActualizarEstadoCotizacion(
  p_id_cotizacion IN INT,
  p_estado_cotizacion IN VARCHAR2
) AS
BEGIN
  UPDATE Cotizaciones
  SET estado_cotizacion = p_estado_cotizacion
  WHERE id_cotizacion = p_id_cotizacion;
  
  COMMIT;
END;

--SP6 - Obtener cantidad de unidades

CREATE OR REPLACE PROCEDURE ObtenerUnidadesDisponibles(
  p_sku_producto IN INT,
  p_unidades OUT INT
) AS
BEGIN
  SELECT unidades_disponibles INTO p_unidades
  FROM Inventario
  WHERE sku_producto = p_sku_producto;
END;

--SP7 - Registrar un cliente nuevo 
--DIO ERROR

CREATE OR REPLACE PROCEDURE RegistrarCliente(
  p_ced_cliente IN INT,
  p_tipo_ced IN VARCHAR2,
  p_nombre_cliente IN VARCHAR2,
  p_fecha_nacimiento IN DATE,
  p_telefono IN VARCHAR2,
  p_email IN VARCHAR2,
  p_direccion IN VARCHAR2,
  p_distrito IN VARCHAR2,
  p_canton IN VARCHAR2,
  p_provincia IN VARCHAR2
) AS
BEGIN
  INSERT INTO Clientes (
    ced_cliente,
    tipo_ced,
    nombre_cliente,
    fecha_nacimiento,
    telefono,
    email,
    direccion,
    distrito,
    canton,
    provincia
  ) VALUES (
    p_ced_cliente,
    p_tipo_ced,
    p_nombre_cliente,
    p_fecha_nacimiento,
    p_telefono,
    p_email,
    p_direccion,
    p_distrito,
    p_canton,
    p_provincia
  );
COMMIT;
END;

--SP8 - Descontinuar un producto
--DIO ERROR

CREATE OR REPLACE PROCEDURE DescontinuarMaterial(
  p_sku_producto IN INT
) AS
BEGIN
  UPDATE Materiales
  SET descontinuado = TRUE
  WHERE sku_producto = p_sku_producto;
  
COMMIT;
END;

--VISTAS - Luis

--Vista1 - Ver materiales en combo
CREATE OR REPLACE VIEW materialEnCombo
AS
    SELECT * FROM MATERIALES WHERE es_combo = 'Y' AND descontinuado = 'N';

SELECT * FROM materialEnCombo;

SELECT * FROM MATERIALES;

--Vista2 - Ver materiales sin combo
CREATE OR REPLACE VIEW materialSinCombo
AS
    SELECT * FROM MATERIALES WHERE es_combo = 'N' AND descontinuado = 'N';

SELECT * FROM materialSinCombo;

--Vista3 - Ver materiales descontinuados
CREATE OR REPLACE VIEW materialDescontinuado
AS
    SELECT * FROM MATERIALES WHERE descontinuado = 'Y';

SELECT * FROM materialDescontinuado;

--VISTAS - Maria 

--Vista4 - Cotizacion de pedidos pendientes 

CREATE OR REPLACE VIEW CotizacionesPendientes AS
SELECT c.id_cotizacion, c.ced_proveedor, c.sku_producto, c.fecha_cotizacion, c.fecha_vencimiento,
       c.dias_para_vencimiento, c.estado_cotizacion, c.fecha_recibido, c.estado_producto,
       p.nombre_proveedor, m.descripcion
FROM Cotizaciones c
JOIN Proveedores p ON c.ced_proveedor = p.ced_proveedor
JOIN Materiales m ON c.sku_producto = m.sku_producto
WHERE c.fecha_recibido IS NULL;


--Vista5 - Inventario insuficiente

CREATE OR REPLACE VIEW InventarioInsuficiente AS
SELECT I.sku_producto, M.descripcion, I.unidades_disponibles
FROM Inventario I
JOIN Materiales M ON I.sku_producto = M.sku_producto
WHERE I.unidades_disponibles < 10; -- Umbral de unidades disponibles ajustable

--FUNCIONES - Luis

--Funcion1 - Compras realizadas en un especifico mes por un cliente en especifico
CREATE OR REPLACE FUNCTION clienteMasCompra(mes INTEGER, cedula INTEGER, anho INTEGER)
RETURN NUMBER
IS
    compras_mes NUMBER;
BEGIN
    SELECT SUM(precio_venta) INTO compras_mes
        FROM CLIENTES
        INNER JOIN FACTURACION USING(ced_cliente)
        WHERE ced_cliente = cedula AND EXTRACT(MONTH FROM fecha_venta) = mes AND EXTRACT(YEAR FROM fecha_venta) = anho;
        RETURN compras_mes;
END;

--Funcion2 - Total IVA recolectado en mes especifico
CREATE OR REPLACE FUNCTION iva_total(mes INTEGER, anho INTEGER)
RETURN NUMBER
IS
    totalIva NUMBER;
BEGIN
    SELECT SUM(iva_total) INTO totalIva
        FROM IVA
        WHERE EXTRACT(MONTH FROM fecha_insercion) = mes AND EXTRACT(YEAR FROM fecha_insercion) = anho;
        RETURN totalIva;
END;

--FUNCIONES - Maria 

--Funcion3 - Proveedor con mas cotizaciones
--DIO ERROR

CREATE OR REPLACE FUNCTION ObtenerProveedorMasCotizaciones RETURN VARCHAR2 AS
  proveedor_nombre VARCHAR2(100);
BEGIN
  SELECT nombre_proveedor INTO proveedor_nombre
  FROM (
    SELECT ced_proveedor, COUNT(*) AS num_cotizaciones
    FROM Cotizaciones
    GROUP BY ced_proveedor
    ORDER BY COUNT(*) DESC
  ) WHERE ROWNUM = 1;
  
  RETURN proveedor_nombre;
END;

--Funcion4 - Calcular total de una factura
--DIO ERROR

CREATE OR REPLACE FUNCTION CalcularPrecioTotalFactura(p_num_factura IN INT) RETURN DECIMAL AS
  precio_total DECIMAL(10, 2);
BEGIN
  SELECT SUM(precio_unidad * unidades) INTO precio_total
  FROM FACTURACION
  WHERE num_factura = p_num_factura;
  
  RETURN precio_total;
END;

--Funcion5 - Fecha mas reciente para cotizar con un proveedor 

CREATE OR REPLACE FUNCTION ObtenerFechaRecienteCotizacionProveedor(p_ced_proveedor IN INT) RETURN DATE AS
  fecha_reciente DATE;
BEGIN
  SELECT MAX(fecha_cotizacion) INTO fecha_reciente
  FROM Cotizaciones
  WHERE ced_proveedor = p_ced_proveedor;
  
  RETURN fecha_reciente;
END;

COMMIT;

--PAQUETES - Luis

--Paquete1 - Inventario por SKU de producto

--Paquete2 - Cotizacion por cédula de proveedor

--TRIGGERS - Luis

--Trigger1 - Ejecutar SP ivaTotal (agregar nuevo registro de IVA) cuando se registra una venta en FACTURACION

--CURSORES - Luis

--Cursor1 - Tomar los materiales descontinuados y trasladarlos a una tabla de auditoria de este tipo de materiales

--Cursor2 - Tomar las cotizaciones a vencer en los proximos 10 días a vencer y cargarlo en una tabla destinada a eso